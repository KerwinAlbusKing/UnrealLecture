
-if문은 중첩을 최대한 하지 않는 걸로!
-입력 예외 처리 해보기
-a++ 은 엄밀히 그 줄에서는 a, 다음줄에서 a+1
-foreach 에서는 값을 바꾸는게 아니라 참조할 값을 전달
-반복문 제어는 프로그램의 최적화(속도향상)에 의의를 둔다
-나가기등 프로그램 전체의 제어를 위한 구문은 프로그램의 최상단에 위치시키는 것이 유리
-조건문 안의 조건등과 같은 곳에 숫자를 바로 넣는 하드코딩이 아닌 상수로 지정을 하여 값을 변화시킬 때 더 간단하게 할 수 있다
-처음부터는 아니지만 일단 코딩후 리펙토링 할때 전환시켜주면 됨
-캐싱은 먼저 계산을 한 후 배열에 저장해 놓고 화면 출력은 그 값만 보여주면 된다 -> 속도 향상
-배열안의 값을 계산식을 넣는 것이 아니라 따로 지역변수나 전역변수로 새로 선언하여 값을 복사해온 후 쓰기
-원본 데이터는 훼손하지 않는 것이 원칙
-중간에 확인을 원하는 변수 값은 새로 선언하여 디버깅으로 확인
-if문 안에는 수식을 넣는 것도 좋지만 bool 형의 변수를 넣어 직관적으로 확인이 쉽게 한다.
-if문은 중첩을 최대한 하지 않는 걸로!
-입력 예외 처리 해보기
-a++ 은 엄밀히 그 줄에서는 a, 다음줄에서 a+1 
-foreach 에서는 값을 바꾸는게 아니라 참조할 값을 전달 
-반복문 제어는 프로그램의 최적화(속도향상)에 의의를 둔다 
-나가기등 프로그램 전체의 제어를 위한 구문은 프로그램의 최상단에 위치시키는 것이 유리 
-조건문 안의 조건등과 같은 곳에 숫자를 바로 넣는 하드코딩이 아닌 상수로 지정을 하여 값을 변화시킬 때 더 간단하게 할 수 있다 
-처음부터는 아니지만 일단 코딩후 리펙토링 할때 전환시켜주면 됨 
-캐싱은 먼저 계산을 한 후 배열에 저장해 놓고 화면 출력은 그 값만 보여주면 된다 -> 속도 향상 
-배열안의 값을 계산식을 넣는 것이 아니라 따로 지역변수나 전역변수로 새로 선언하여 값을 복사해온 후 쓰기
-함수 포인터 (push or pull)
-함수 호출시 배열이나 클래스 등 데이터를 복사하기 부담스러울때 포인터, 그 때 값의 변화를 막기 위해 const
-unreal or unity life cycle
